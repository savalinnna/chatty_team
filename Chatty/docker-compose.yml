services:

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  auth_service:
    build:
      context: ./auth_service
      dockerfile: ./Dockerfile
    container_name: auth_service
    ports:
      - "8003:8003"
    env_file: .env.local
    environment:
      DB_HOST: auth_db
      DB_PORT: 5432
    volumes:
      - ./auth_service:/app
    depends_on:
      - auth_db
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 3s
      retries: 5

  auth_db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    image: postgres:15.3
    container_name: auth_db
    environment:
      POSTGRES_DB: AuthDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data

  post_service:
    build:
      context: ./post_service
      dockerfile: ./Dockerfile
    container_name: post_service
    ports:
      - "8006:8006"
    env_file: .env
    environment:
      DB_HOST: post_db
      DB_PORT: 5432
    volumes:
      - ./post_service:/app
    depends_on:
      - rabbitmq
      - post_db

  post_db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    image: postgres:15.3
    container_name: post_db
    environment:
      POSTGRES_DB: PostDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - post_db_data:/var/lib/postgresql/data

  subscription_service:
    build:
      context: ./subscription_service
      dockerfile: ./Dockerfile
    container_name: subscription_service
    ports:
      - "8007:8007"
    env_file: .env
    environment:
      DB_HOST: subscription_db
      DB_PORT: 5432
    volumes:
      - ./subscription_service:/app
    depends_on:
      - subscription_db
      - rabbitmq
      - auth_service

  subscription_db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    image: postgres:15.3
    container_name: subscription_db
    environment:
      POSTGRES_DB: SubscriptionDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - subscription_db_data:/var/lib/postgresql/data

  admin_service:
    build:
      context: ./admin_service
      dockerfile: ./Dockerfile
    container_name: admin_service
    ports:
      - "8009:8009"
    environment:
      DB_HOST: admin_db
      DB_PORT: 5432
      DB_NAME: AdminDB
      DB_USER: postgres
      DB_PASSWORD: postgres
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    volumes:
      - ./admin_service:/app
    depends_on:
      admin_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8009"]
      interval: 10s
      retries: 3

  admin_db:
    image: postgres:15.3
    container_name: admin_db
    environment:
      POSTGRES_DB: AdminDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    volumes:
      - admin_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      auth_service:
        condition: service_healthy
      post_service:
        condition: service_healthy
      subscription_service:
        condition: service_healthy
      admin_service:
        condition: service_healthy

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: always

volumes:
  auth_db_data:
  admin_db_data:
  post_db_data:
  subscription_db_data:
  rabbitmq_data:
  minio_data:




